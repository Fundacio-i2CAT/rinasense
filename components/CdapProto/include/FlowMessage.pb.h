/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.6 */

#ifndef PB_RINA_MESSAGES_FLOWMESSAGE_PB_H_INCLUDED
#define PB_RINA_MESSAGES_FLOWMESSAGE_PB_H_INCLUDED
#include <pb.h>
#include "ApplicationProcessNamingInfoMessage.pb.h"
#include "QoSSpecification.pb.h"
#include "ConnectionPoliciesMessage.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _rina_messages_connectionId_t { /* information to identify a connection */
    bool has_qosId;
    uint32_t qosId; /* identifies the QoS cube under which this flow is classified */
    bool has_sourceCEPId;
    uint32_t sourceCEPId; /* identifies the source connection endpoint (unique within the source IPC process) */
    bool has_destinationCEPId;
    uint32_t destinationCEPId; /* identifies the destination connection endpoint (unique within the destination IPC process) */
} rina_messages_connectionId_t;

typedef struct _rina_messages_Flow { /* Contains the information to setup a new flow */
    rina_messages_applicationProcessNamingInfo_t sourceNamingInfo; /* The naming information of the source application process */
    rina_messages_applicationProcessNamingInfo_t destinationNamingInfo; /* The naming information of the destination application process */
    uint64_t sourcePortId; /* The port id allocated to this flow by the source IPC process */
    bool has_destinationPortId;
    uint64_t destinationPortId; /* The port id allocated to this flow by the destination IPC process */
    uint64_t sourceAddress; /* The address of the source IPC process for this flow */
    bool has_destinationAddress;
    uint64_t destinationAddress; /* The address of the destination IPC process for this flow */
    pb_size_t connectionIds_count;
    rina_messages_connectionId_t connectionIds[1]; /* The identifiers of all the connections that can be used to support this flow during its lifetime */
    bool has_currentConnectionIdIndex;
    uint32_t currentConnectionIdIndex; /* Identifies the index of the current active connection in the flow */
    bool has_state;
    uint32_t state; /*  */
    bool has_qosParameters;
    rina_messages_qosSpecification_t qosParameters; /* the QoS parameters specified by the application process that requested this flow */
    bool has_dtpConfig;
    rina_messages_dtpConfig_t dtpConfig; /* the configuration for the policies and parameters of this connection's DTP */
    bool has_dtcpConfig;
    rina_messages_dtcpConfig_t dtcpConfig; /* the configuration for the policies and parameters of this connection's DTCP */
    pb_callback_t accessControl; /* ? */
    bool has_maxCreateFlowRetries;
    uint32_t maxCreateFlowRetries; /* Maximum number of retries to create the flow before giving up */
    bool has_createFlowRetries;
    uint32_t createFlowRetries; /* The current number of retries */
    bool has_hopCount;
    uint32_t hopCount; /* While the search rules that generate the forwarding table should allow for a natural termination condition, it seems wise to have the means to enforce termination */
} rina_messages_Flow;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define rina_messages_connectionId_t_init_default {false, 0, false, 0, false, 0}
#define rina_messages_Flow_init_default          {rina_messages_applicationProcessNamingInfo_t_init_default, rina_messages_applicationProcessNamingInfo_t_init_default, 0, false, 0, 0, false, 0, 0, {rina_messages_connectionId_t_init_default}, false, 0, false, 0, false, rina_messages_qosSpecification_t_init_default, false, rina_messages_dtpConfig_t_init_default, false, rina_messages_dtcpConfig_t_init_default, {{NULL}, NULL}, false, 0, false, 0, false, 0}
#define rina_messages_connectionId_t_init_zero   {false, 0, false, 0, false, 0}
#define rina_messages_Flow_init_zero             {rina_messages_applicationProcessNamingInfo_t_init_zero, rina_messages_applicationProcessNamingInfo_t_init_zero, 0, false, 0, 0, false, 0, 0, {rina_messages_connectionId_t_init_zero}, false, 0, false, 0, false, rina_messages_qosSpecification_t_init_zero, false, rina_messages_dtpConfig_t_init_zero, false, rina_messages_dtcpConfig_t_init_zero, {{NULL}, NULL}, false, 0, false, 0, false, 0}

/* Field tags (for use in manual encoding/decoding) */
#define rina_messages_connectionId_t_qosId_tag   1
#define rina_messages_connectionId_t_sourceCEPId_tag 2
#define rina_messages_connectionId_t_destinationCEPId_tag 3
#define rina_messages_Flow_sourceNamingInfo_tag  1
#define rina_messages_Flow_destinationNamingInfo_tag 2
#define rina_messages_Flow_sourcePortId_tag      3
#define rina_messages_Flow_destinationPortId_tag 4
#define rina_messages_Flow_sourceAddress_tag     5
#define rina_messages_Flow_destinationAddress_tag 6
#define rina_messages_Flow_connectionIds_tag     7
#define rina_messages_Flow_currentConnectionIdIndex_tag 8
#define rina_messages_Flow_state_tag             9
#define rina_messages_Flow_qosParameters_tag     10
#define rina_messages_Flow_dtpConfig_tag         12
#define rina_messages_Flow_dtcpConfig_tag        13
#define rina_messages_Flow_accessControl_tag     14
#define rina_messages_Flow_maxCreateFlowRetries_tag 15
#define rina_messages_Flow_createFlowRetries_tag 16
#define rina_messages_Flow_hopCount_tag          17

/* Struct field encoding specification for nanopb */
#define rina_messages_connectionId_t_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   qosId,             1) \
X(a, STATIC,   OPTIONAL, UINT32,   sourceCEPId,       2) \
X(a, STATIC,   OPTIONAL, UINT32,   destinationCEPId,   3)
#define rina_messages_connectionId_t_CALLBACK NULL
#define rina_messages_connectionId_t_DEFAULT NULL

#define rina_messages_Flow_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, MESSAGE,  sourceNamingInfo,   1) \
X(a, STATIC,   REQUIRED, MESSAGE,  destinationNamingInfo,   2) \
X(a, STATIC,   REQUIRED, UINT64,   sourcePortId,      3) \
X(a, STATIC,   OPTIONAL, UINT64,   destinationPortId,   4) \
X(a, STATIC,   REQUIRED, UINT64,   sourceAddress,     5) \
X(a, STATIC,   OPTIONAL, UINT64,   destinationAddress,   6) \
X(a, STATIC,   REPEATED, MESSAGE,  connectionIds,     7) \
X(a, STATIC,   OPTIONAL, UINT32,   currentConnectionIdIndex,   8) \
X(a, STATIC,   OPTIONAL, UINT32,   state,             9) \
X(a, STATIC,   OPTIONAL, MESSAGE,  qosParameters,    10) \
X(a, STATIC,   OPTIONAL, MESSAGE,  dtpConfig,        12) \
X(a, STATIC,   OPTIONAL, MESSAGE,  dtcpConfig,       13) \
X(a, CALLBACK, OPTIONAL, BYTES,    accessControl,    14) \
X(a, STATIC,   OPTIONAL, UINT32,   maxCreateFlowRetries,  15) \
X(a, STATIC,   OPTIONAL, UINT32,   createFlowRetries,  16) \
X(a, STATIC,   OPTIONAL, UINT32,   hopCount,         17)
#define rina_messages_Flow_CALLBACK pb_default_field_callback
#define rina_messages_Flow_DEFAULT NULL
#define rina_messages_Flow_sourceNamingInfo_MSGTYPE rina_messages_applicationProcessNamingInfo_t
#define rina_messages_Flow_destinationNamingInfo_MSGTYPE rina_messages_applicationProcessNamingInfo_t
#define rina_messages_Flow_connectionIds_MSGTYPE rina_messages_connectionId_t
#define rina_messages_Flow_qosParameters_MSGTYPE rina_messages_qosSpecification_t
#define rina_messages_Flow_dtpConfig_MSGTYPE rina_messages_dtpConfig_t
#define rina_messages_Flow_dtcpConfig_MSGTYPE rina_messages_dtcpConfig_t

extern const pb_msgdesc_t rina_messages_connectionId_t_msg;
extern const pb_msgdesc_t rina_messages_Flow_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define rina_messages_connectionId_t_fields &rina_messages_connectionId_t_msg
#define rina_messages_Flow_fields &rina_messages_Flow_msg

/* Maximum encoded size of messages (where known) */
/* rina_messages_Flow_size depends on runtime parameters */
#define rina_messages_connectionId_t_size        18

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
