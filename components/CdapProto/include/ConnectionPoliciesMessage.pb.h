/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.6 */

#ifndef PB_RINA_MESSAGES_CONNECTIONPOLICIESMESSAGE_PB_H_INCLUDED
#define PB_RINA_MESSAGES_CONNECTIONPOLICIESMESSAGE_PB_H_INCLUDED
#include <pb.h>
#include "PolicyDescriptorMessage.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _rina_messages_dtcpRateBasedFlowControlConfig_t { /* the rate-based flow control configuration of a connection */
    bool has_sendingrate;
    uint64_t sendingrate; /* the number of PDUs that may be sent in a TimePeriod. Used with rate-based flow control */
    bool has_timeperiod;
    uint64_t timeperiod; /* length of time in microseconds for pacing rate-based flow control */
    bool has_norateslowdownpolicy;
    rina_messages_policyDescriptor_t norateslowdownpolicy; /* used to momentarily lower the send rate below the rate allowed */
    bool has_nooverridedefaultpeakpolicy;
    rina_messages_policyDescriptor_t nooverridedefaultpeakpolicy; /* Allows rate-based flow control to exceed its nominal rate */
    bool has_ratereductionpolicy;
    rina_messages_policyDescriptor_t ratereductionpolicy; /* Allows an alternate action when using rate-based flow control and the number of free buffers is getting low */
} rina_messages_dtcpRateBasedFlowControlConfig_t;

typedef struct _rina_messages_dtcpRtxControlConfig_t { /* the rtx control configuration of a connection */
    bool has_maxtimetoretry;
    uint32_t maxtimetoretry; /* Maximum time trying to retransmit a PDU (R) */
    bool has_datarxmsnmax;
    uint32_t datarxmsnmax; /* the number of times the retransmission of a PDU will be attempted before some other action must be taken */
    bool has_rtxtimerexpirypolicy;
    rina_messages_policyDescriptor_t rtxtimerexpirypolicy; /* Executed by the sender when a Retransmission Timer Expires */
    bool has_senderackpolicy;
    rina_messages_policyDescriptor_t senderackpolicy; /* Executed by the sender and provides the Sender with some discretion on when PDUs may be deleted from the ReTransmissionQ */
    bool has_recvingacklistpolicy;
    rina_messages_policyDescriptor_t recvingacklistpolicy; /*  */
    bool has_rcvrackpolicy;
    rina_messages_policyDescriptor_t rcvrackpolicy; /* Executed by the receiver of the PDU and provides some discretion in the action taken */
    bool has_sendingackpolicy;
    rina_messages_policyDescriptor_t sendingackpolicy; /* allows an alternate action when the A-Timer expires when DTCP is present. */
    bool has_rcvrcontrolackpolicy;
    rina_messages_policyDescriptor_t rcvrcontrolackpolicy; /* Allows an alternate action when a Control Ack PDU is received */
    bool has_initialRtxTime;
    uint32_t initialRtxTime; /* maximum time that a sender will wait before retransmitting the SDU */
} rina_messages_dtcpRtxControlConfig_t;

typedef struct _rina_messages_dtcpWindowBasedFlowControlConfig_t { /* the window-based flow control configuration of a connection */
    bool has_maxclosedwindowqueuelength;
    uint64_t maxclosedwindowqueuelength; /* Integer that the number PDUs that can be put on the ClosedWindowQueue before something must be done */
    bool has_initialcredit;
    uint64_t initialcredit; /* initial sequence number to get right window edge */
    bool has_rcvrflowcontrolpolicy;
    rina_messages_policyDescriptor_t rcvrflowcontrolpolicy; /* Invoked when a Transfer PDU is received to give the receiving PM an opportunity to update the flow control allocations */
    bool has_txcontrolpolicy;
    rina_messages_policyDescriptor_t txcontrolpolicy; /* This policy is used when there are conditions that warrant sending fewer PDUs than allowed by the sliding window flow control, e.g. the ECN bit is set. */
} rina_messages_dtcpWindowBasedFlowControlConfig_t;

typedef struct _rina_messages_dtpConfig_t { /* configuration of the policies and parameters of a DTP element */
    bool has_dtcpPresent;
    bool dtcpPresent; /* indicates if this connection is using DTCP */
    bool has_rcvrtimerinactivitypolicy;
    rina_messages_policyDescriptor_t rcvrtimerinactivitypolicy; /* If no PDUs arrive in this time period, the receiver should expect a DRF in the next Transfer PDU */
    bool has_sendertimerinactiviypolicy;
    rina_messages_policyDescriptor_t sendertimerinactiviypolicy; /* This timer is used to detect long periods of no traffic, indicating that a DRF should be sent */
    bool has_initialseqnumpolicy;
    rina_messages_policyDescriptor_t initialseqnumpolicy; /* allows some discretion in selecting the initial sequence number, when DRF is going to be sent */
    bool has_seqnumrolloverthreshold;
    uint64_t seqnumrolloverthreshold; /* the sequence number rollover threshold */
    bool has_initialATimer;
    uint32_t initialATimer; /* maximum time that a receiver will wait before sending an Ack */
    bool has_dtppolicyset;
    rina_messages_policyDescriptor_t dtppolicyset; /* it indicates the name of the policy set fot the dtp */
} rina_messages_dtpConfig_t;

typedef struct _rina_messages_connection_t { 
    bool has_src_cep_id;
    uint32_t src_cep_id; /* identifies the source connection endpoint (unique within the source IPC process) */
    bool has_dest_cep_id;
    uint32_t dest_cep_id; /* identifies the destination connection endpoint (unique within the destination IPC process) */
    bool has_qos_id;
    uint32_t qos_id; /* identifies the QoS cube under which this connection is classified */
    bool has_src_address;
    uint32_t src_address; /* The local IPCP address */
    bool has_dest_address;
    uint32_t dest_address; /* The remote IPCP address */
    bool has_port_id;
    uint32_t port_id; /* The port-id of the flow this connection belongs to */
    bool has_dtp_config;
    rina_messages_dtpConfig_t dtp_config; /* The DTP configuration */
    bool has_pdus_tx;
    uint32_t pdus_tx; /* PDUs transmitted on this connection */
    bool has_pdus_rx;
    uint32_t pdus_rx; /* PDUs received on this connection */
    bool has_bytes_tx;
    uint64_t bytes_tx; /* Bytes transmitted on this connection */
    bool has_bytes_rx;
    uint64_t bytes_rx; /* Bytes received on this connection */
} rina_messages_connection_t;

typedef struct _rina_messages_dtcpFlowControlConfig_t { /* the flow control configuration of a connection */
    bool has_windowBased;
    bool windowBased; /* indicates whether window-based flow control is in use */
    bool has_windowBasedConfig;
    rina_messages_dtcpWindowBasedFlowControlConfig_t windowBasedConfig; /* the window-based flow control configuration */
    bool has_rateBased;
    bool rateBased; /* indicates whether rate-based flow control is in use */
    bool has_rateBasedConfig;
    rina_messages_dtcpRateBasedFlowControlConfig_t rateBasedConfig; /* the rate-based flow control configuration */
    bool has_sentbytesthreshold;
    uint64_t sentbytesthreshold; /* The number of free bytes below which flow control should slow or block the user from doing any more Writes */
    bool has_sentbytespercentthreshold;
    uint64_t sentbytespercentthreshold; /* The percent of free bytes below, which flow control should slow or block the user from doing any more Writes */
    bool has_sentbuffersthreshold;
    uint64_t sentbuffersthreshold; /* The number of free buffers below which flow control should slow or block the user from doing any more Writes */
    bool has_rcvbytesthreshold;
    uint64_t rcvbytesthreshold; /* The number of free bytes below which flow control does not move or decreases the amount the Right Window Edge is moved */
    bool has_rcvbytespercentthreshold;
    uint64_t rcvbytespercentthreshold; /* The number of free buffers at which flow control does not advance or decreases the amount the Right Window Edge is moved. */
    bool has_rcvbuffersthreshold;
    uint64_t rcvbuffersthreshold; /* The percent of free buffers below which flow control should not advance or decreases the amount the Right Window Edge is moved */
    bool has_closedwindowpolicy;
    rina_messages_policyDescriptor_t closedwindowpolicy; /* Determine the action to be taken when the receiver has not extended more credit to allow the sender to send more PDUs */
    bool has_flowcontroloverrunpolicy;
    rina_messages_policyDescriptor_t flowcontroloverrunpolicy; /* Determines what action to take if the receiver receives PDUs but the credit or rate has been exceeded */
    bool has_reconcileflowcontrolpolicy;
    rina_messages_policyDescriptor_t reconcileflowcontrolpolicy; /* Invoked when both Credit and Rate based flow control are in use and they disagree on whether the PM can send or receive data */
    bool has_receivingflowcontrolpolicy;
    rina_messages_policyDescriptor_t receivingflowcontrolpolicy; /* Allows some discretion in when to send a Flow Control PDU when there is no Retransmission Control */
} rina_messages_dtcpFlowControlConfig_t;

typedef struct _rina_messages_dtcpConfig_t { /* configuration of DTCP for a connection */
    bool has_flowControl;
    bool flowControl; /* indicates if flow control is enabled in this connection */
    bool has_flowControlConfig;
    rina_messages_dtcpFlowControlConfig_t flowControlConfig; /* the flow control configuration */
    bool has_rtxControl;
    bool rtxControl; /* inidicates if rtx control is enabled in this connection */
    bool has_rtxControlConfig;
    rina_messages_dtcpRtxControlConfig_t rtxControlConfig; /* the rtx control configuration */
    bool has_lostcontrolpdupolicy;
    rina_messages_policyDescriptor_t lostcontrolpdupolicy; /* Determines what action to take when the PM detects that a control PDU (Ack or Flow Control) may have been lost */
    bool has_rttestimatorpolicy;
    rina_messages_policyDescriptor_t rttestimatorpolicy; /* Executed by the sender to estimate the duration of the retx timer */
    bool has_dtcppolicyset;
    rina_messages_policyDescriptor_t dtcppolicyset; /* it indicates the name of the policy set fot the dtcp */
} rina_messages_dtcpConfig_t;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define rina_messages_dtcpWindowBasedFlowControlConfig_t_init_default {false, 0, false, 0, false, rina_messages_policyDescriptor_t_init_default, false, rina_messages_policyDescriptor_t_init_default}
#define rina_messages_dtcpRateBasedFlowControlConfig_t_init_default {false, 0, false, 0, false, rina_messages_policyDescriptor_t_init_default, false, rina_messages_policyDescriptor_t_init_default, false, rina_messages_policyDescriptor_t_init_default}
#define rina_messages_dtcpFlowControlConfig_t_init_default {false, 0, false, rina_messages_dtcpWindowBasedFlowControlConfig_t_init_default, false, 0, false, rina_messages_dtcpRateBasedFlowControlConfig_t_init_default, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, rina_messages_policyDescriptor_t_init_default, false, rina_messages_policyDescriptor_t_init_default, false, rina_messages_policyDescriptor_t_init_default, false, rina_messages_policyDescriptor_t_init_default}
#define rina_messages_dtcpRtxControlConfig_t_init_default {false, 0, false, 0, false, rina_messages_policyDescriptor_t_init_default, false, rina_messages_policyDescriptor_t_init_default, false, rina_messages_policyDescriptor_t_init_default, false, rina_messages_policyDescriptor_t_init_default, false, rina_messages_policyDescriptor_t_init_default, false, rina_messages_policyDescriptor_t_init_default, false, 0}
#define rina_messages_dtcpConfig_t_init_default  {false, 0, false, rina_messages_dtcpFlowControlConfig_t_init_default, false, 0, false, rina_messages_dtcpRtxControlConfig_t_init_default, false, rina_messages_policyDescriptor_t_init_default, false, rina_messages_policyDescriptor_t_init_default, false, rina_messages_policyDescriptor_t_init_default}
#define rina_messages_dtpConfig_t_init_default   {false, 0, false, rina_messages_policyDescriptor_t_init_default, false, rina_messages_policyDescriptor_t_init_default, false, rina_messages_policyDescriptor_t_init_default, false, 0, false, 0, false, rina_messages_policyDescriptor_t_init_default}
#define rina_messages_connection_t_init_default  {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, rina_messages_dtpConfig_t_init_default, false, 0, false, 0, false, 0, false, 0}
#define rina_messages_dtcpWindowBasedFlowControlConfig_t_init_zero {false, 0, false, 0, false, rina_messages_policyDescriptor_t_init_zero, false, rina_messages_policyDescriptor_t_init_zero}
#define rina_messages_dtcpRateBasedFlowControlConfig_t_init_zero {false, 0, false, 0, false, rina_messages_policyDescriptor_t_init_zero, false, rina_messages_policyDescriptor_t_init_zero, false, rina_messages_policyDescriptor_t_init_zero}
#define rina_messages_dtcpFlowControlConfig_t_init_zero {false, 0, false, rina_messages_dtcpWindowBasedFlowControlConfig_t_init_zero, false, 0, false, rina_messages_dtcpRateBasedFlowControlConfig_t_init_zero, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, rina_messages_policyDescriptor_t_init_zero, false, rina_messages_policyDescriptor_t_init_zero, false, rina_messages_policyDescriptor_t_init_zero, false, rina_messages_policyDescriptor_t_init_zero}
#define rina_messages_dtcpRtxControlConfig_t_init_zero {false, 0, false, 0, false, rina_messages_policyDescriptor_t_init_zero, false, rina_messages_policyDescriptor_t_init_zero, false, rina_messages_policyDescriptor_t_init_zero, false, rina_messages_policyDescriptor_t_init_zero, false, rina_messages_policyDescriptor_t_init_zero, false, rina_messages_policyDescriptor_t_init_zero, false, 0}
#define rina_messages_dtcpConfig_t_init_zero     {false, 0, false, rina_messages_dtcpFlowControlConfig_t_init_zero, false, 0, false, rina_messages_dtcpRtxControlConfig_t_init_zero, false, rina_messages_policyDescriptor_t_init_zero, false, rina_messages_policyDescriptor_t_init_zero, false, rina_messages_policyDescriptor_t_init_zero}
#define rina_messages_dtpConfig_t_init_zero      {false, 0, false, rina_messages_policyDescriptor_t_init_zero, false, rina_messages_policyDescriptor_t_init_zero, false, rina_messages_policyDescriptor_t_init_zero, false, 0, false, 0, false, rina_messages_policyDescriptor_t_init_zero}
#define rina_messages_connection_t_init_zero     {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, rina_messages_dtpConfig_t_init_zero, false, 0, false, 0, false, 0, false, 0}

/* Field tags (for use in manual encoding/decoding) */
#define rina_messages_dtcpRateBasedFlowControlConfig_t_sendingrate_tag 1
#define rina_messages_dtcpRateBasedFlowControlConfig_t_timeperiod_tag 2
#define rina_messages_dtcpRateBasedFlowControlConfig_t_norateslowdownpolicy_tag 3
#define rina_messages_dtcpRateBasedFlowControlConfig_t_nooverridedefaultpeakpolicy_tag 4
#define rina_messages_dtcpRateBasedFlowControlConfig_t_ratereductionpolicy_tag 5
#define rina_messages_dtcpRtxControlConfig_t_maxtimetoretry_tag 1
#define rina_messages_dtcpRtxControlConfig_t_datarxmsnmax_tag 2
#define rina_messages_dtcpRtxControlConfig_t_rtxtimerexpirypolicy_tag 3
#define rina_messages_dtcpRtxControlConfig_t_senderackpolicy_tag 4
#define rina_messages_dtcpRtxControlConfig_t_recvingacklistpolicy_tag 5
#define rina_messages_dtcpRtxControlConfig_t_rcvrackpolicy_tag 6
#define rina_messages_dtcpRtxControlConfig_t_sendingackpolicy_tag 7
#define rina_messages_dtcpRtxControlConfig_t_rcvrcontrolackpolicy_tag 8
#define rina_messages_dtcpRtxControlConfig_t_initialRtxTime_tag 9
#define rina_messages_dtcpWindowBasedFlowControlConfig_t_maxclosedwindowqueuelength_tag 1
#define rina_messages_dtcpWindowBasedFlowControlConfig_t_initialcredit_tag 2
#define rina_messages_dtcpWindowBasedFlowControlConfig_t_rcvrflowcontrolpolicy_tag 3
#define rina_messages_dtcpWindowBasedFlowControlConfig_t_txcontrolpolicy_tag 4
#define rina_messages_dtpConfig_t_dtcpPresent_tag 1
#define rina_messages_dtpConfig_t_rcvrtimerinactivitypolicy_tag 3
#define rina_messages_dtpConfig_t_sendertimerinactiviypolicy_tag 4
#define rina_messages_dtpConfig_t_initialseqnumpolicy_tag 5
#define rina_messages_dtpConfig_t_seqnumrolloverthreshold_tag 6
#define rina_messages_dtpConfig_t_initialATimer_tag 7
#define rina_messages_dtpConfig_t_dtppolicyset_tag 8
#define rina_messages_connection_t_src_cep_id_tag 1
#define rina_messages_connection_t_dest_cep_id_tag 2
#define rina_messages_connection_t_qos_id_tag    3
#define rina_messages_connection_t_src_address_tag 4
#define rina_messages_connection_t_dest_address_tag 5
#define rina_messages_connection_t_port_id_tag   6
#define rina_messages_connection_t_dtp_config_tag 7
#define rina_messages_connection_t_pdus_tx_tag   8
#define rina_messages_connection_t_pdus_rx_tag   9
#define rina_messages_connection_t_bytes_tx_tag  10
#define rina_messages_connection_t_bytes_rx_tag  11
#define rina_messages_dtcpFlowControlConfig_t_windowBased_tag 1
#define rina_messages_dtcpFlowControlConfig_t_windowBasedConfig_tag 2
#define rina_messages_dtcpFlowControlConfig_t_rateBased_tag 3
#define rina_messages_dtcpFlowControlConfig_t_rateBasedConfig_tag 4
#define rina_messages_dtcpFlowControlConfig_t_sentbytesthreshold_tag 5
#define rina_messages_dtcpFlowControlConfig_t_sentbytespercentthreshold_tag 6
#define rina_messages_dtcpFlowControlConfig_t_sentbuffersthreshold_tag 7
#define rina_messages_dtcpFlowControlConfig_t_rcvbytesthreshold_tag 8
#define rina_messages_dtcpFlowControlConfig_t_rcvbytespercentthreshold_tag 9
#define rina_messages_dtcpFlowControlConfig_t_rcvbuffersthreshold_tag 10
#define rina_messages_dtcpFlowControlConfig_t_closedwindowpolicy_tag 11
#define rina_messages_dtcpFlowControlConfig_t_flowcontroloverrunpolicy_tag 12
#define rina_messages_dtcpFlowControlConfig_t_reconcileflowcontrolpolicy_tag 13
#define rina_messages_dtcpFlowControlConfig_t_receivingflowcontrolpolicy_tag 14
#define rina_messages_dtcpConfig_t_flowControl_tag 1
#define rina_messages_dtcpConfig_t_flowControlConfig_tag 2
#define rina_messages_dtcpConfig_t_rtxControl_tag 3
#define rina_messages_dtcpConfig_t_rtxControlConfig_tag 4
#define rina_messages_dtcpConfig_t_lostcontrolpdupolicy_tag 5
#define rina_messages_dtcpConfig_t_rttestimatorpolicy_tag 6
#define rina_messages_dtcpConfig_t_dtcppolicyset_tag 7

/* Struct field encoding specification for nanopb */
#define rina_messages_dtcpWindowBasedFlowControlConfig_t_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   maxclosedwindowqueuelength,   1) \
X(a, STATIC,   OPTIONAL, UINT64,   initialcredit,     2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  rcvrflowcontrolpolicy,   3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  txcontrolpolicy,   4)
#define rina_messages_dtcpWindowBasedFlowControlConfig_t_CALLBACK NULL
#define rina_messages_dtcpWindowBasedFlowControlConfig_t_DEFAULT NULL
#define rina_messages_dtcpWindowBasedFlowControlConfig_t_rcvrflowcontrolpolicy_MSGTYPE rina_messages_policyDescriptor_t
#define rina_messages_dtcpWindowBasedFlowControlConfig_t_txcontrolpolicy_MSGTYPE rina_messages_policyDescriptor_t

#define rina_messages_dtcpRateBasedFlowControlConfig_t_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   sendingrate,       1) \
X(a, STATIC,   OPTIONAL, UINT64,   timeperiod,        2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  norateslowdownpolicy,   3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  nooverridedefaultpeakpolicy,   4) \
X(a, STATIC,   OPTIONAL, MESSAGE,  ratereductionpolicy,   5)
#define rina_messages_dtcpRateBasedFlowControlConfig_t_CALLBACK NULL
#define rina_messages_dtcpRateBasedFlowControlConfig_t_DEFAULT NULL
#define rina_messages_dtcpRateBasedFlowControlConfig_t_norateslowdownpolicy_MSGTYPE rina_messages_policyDescriptor_t
#define rina_messages_dtcpRateBasedFlowControlConfig_t_nooverridedefaultpeakpolicy_MSGTYPE rina_messages_policyDescriptor_t
#define rina_messages_dtcpRateBasedFlowControlConfig_t_ratereductionpolicy_MSGTYPE rina_messages_policyDescriptor_t

#define rina_messages_dtcpFlowControlConfig_t_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BOOL,     windowBased,       1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  windowBasedConfig,   2) \
X(a, STATIC,   OPTIONAL, BOOL,     rateBased,         3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  rateBasedConfig,   4) \
X(a, STATIC,   OPTIONAL, UINT64,   sentbytesthreshold,   5) \
X(a, STATIC,   OPTIONAL, UINT64,   sentbytespercentthreshold,   6) \
X(a, STATIC,   OPTIONAL, UINT64,   sentbuffersthreshold,   7) \
X(a, STATIC,   OPTIONAL, UINT64,   rcvbytesthreshold,   8) \
X(a, STATIC,   OPTIONAL, UINT64,   rcvbytespercentthreshold,   9) \
X(a, STATIC,   OPTIONAL, UINT64,   rcvbuffersthreshold,  10) \
X(a, STATIC,   OPTIONAL, MESSAGE,  closedwindowpolicy,  11) \
X(a, STATIC,   OPTIONAL, MESSAGE,  flowcontroloverrunpolicy,  12) \
X(a, STATIC,   OPTIONAL, MESSAGE,  reconcileflowcontrolpolicy,  13) \
X(a, STATIC,   OPTIONAL, MESSAGE,  receivingflowcontrolpolicy,  14)
#define rina_messages_dtcpFlowControlConfig_t_CALLBACK NULL
#define rina_messages_dtcpFlowControlConfig_t_DEFAULT NULL
#define rina_messages_dtcpFlowControlConfig_t_windowBasedConfig_MSGTYPE rina_messages_dtcpWindowBasedFlowControlConfig_t
#define rina_messages_dtcpFlowControlConfig_t_rateBasedConfig_MSGTYPE rina_messages_dtcpRateBasedFlowControlConfig_t
#define rina_messages_dtcpFlowControlConfig_t_closedwindowpolicy_MSGTYPE rina_messages_policyDescriptor_t
#define rina_messages_dtcpFlowControlConfig_t_flowcontroloverrunpolicy_MSGTYPE rina_messages_policyDescriptor_t
#define rina_messages_dtcpFlowControlConfig_t_reconcileflowcontrolpolicy_MSGTYPE rina_messages_policyDescriptor_t
#define rina_messages_dtcpFlowControlConfig_t_receivingflowcontrolpolicy_MSGTYPE rina_messages_policyDescriptor_t

#define rina_messages_dtcpRtxControlConfig_t_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   maxtimetoretry,    1) \
X(a, STATIC,   OPTIONAL, UINT32,   datarxmsnmax,      2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  rtxtimerexpirypolicy,   3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  senderackpolicy,   4) \
X(a, STATIC,   OPTIONAL, MESSAGE,  recvingacklistpolicy,   5) \
X(a, STATIC,   OPTIONAL, MESSAGE,  rcvrackpolicy,     6) \
X(a, STATIC,   OPTIONAL, MESSAGE,  sendingackpolicy,   7) \
X(a, STATIC,   OPTIONAL, MESSAGE,  rcvrcontrolackpolicy,   8) \
X(a, STATIC,   OPTIONAL, UINT32,   initialRtxTime,    9)
#define rina_messages_dtcpRtxControlConfig_t_CALLBACK NULL
#define rina_messages_dtcpRtxControlConfig_t_DEFAULT NULL
#define rina_messages_dtcpRtxControlConfig_t_rtxtimerexpirypolicy_MSGTYPE rina_messages_policyDescriptor_t
#define rina_messages_dtcpRtxControlConfig_t_senderackpolicy_MSGTYPE rina_messages_policyDescriptor_t
#define rina_messages_dtcpRtxControlConfig_t_recvingacklistpolicy_MSGTYPE rina_messages_policyDescriptor_t
#define rina_messages_dtcpRtxControlConfig_t_rcvrackpolicy_MSGTYPE rina_messages_policyDescriptor_t
#define rina_messages_dtcpRtxControlConfig_t_sendingackpolicy_MSGTYPE rina_messages_policyDescriptor_t
#define rina_messages_dtcpRtxControlConfig_t_rcvrcontrolackpolicy_MSGTYPE rina_messages_policyDescriptor_t

#define rina_messages_dtcpConfig_t_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BOOL,     flowControl,       1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  flowControlConfig,   2) \
X(a, STATIC,   OPTIONAL, BOOL,     rtxControl,        3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  rtxControlConfig,   4) \
X(a, STATIC,   OPTIONAL, MESSAGE,  lostcontrolpdupolicy,   5) \
X(a, STATIC,   OPTIONAL, MESSAGE,  rttestimatorpolicy,   6) \
X(a, STATIC,   OPTIONAL, MESSAGE,  dtcppolicyset,     7)
#define rina_messages_dtcpConfig_t_CALLBACK NULL
#define rina_messages_dtcpConfig_t_DEFAULT NULL
#define rina_messages_dtcpConfig_t_flowControlConfig_MSGTYPE rina_messages_dtcpFlowControlConfig_t
#define rina_messages_dtcpConfig_t_rtxControlConfig_MSGTYPE rina_messages_dtcpRtxControlConfig_t
#define rina_messages_dtcpConfig_t_lostcontrolpdupolicy_MSGTYPE rina_messages_policyDescriptor_t
#define rina_messages_dtcpConfig_t_rttestimatorpolicy_MSGTYPE rina_messages_policyDescriptor_t
#define rina_messages_dtcpConfig_t_dtcppolicyset_MSGTYPE rina_messages_policyDescriptor_t

#define rina_messages_dtpConfig_t_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BOOL,     dtcpPresent,       1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  rcvrtimerinactivitypolicy,   3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  sendertimerinactiviypolicy,   4) \
X(a, STATIC,   OPTIONAL, MESSAGE,  initialseqnumpolicy,   5) \
X(a, STATIC,   OPTIONAL, UINT64,   seqnumrolloverthreshold,   6) \
X(a, STATIC,   OPTIONAL, UINT32,   initialATimer,     7) \
X(a, STATIC,   OPTIONAL, MESSAGE,  dtppolicyset,      8)
#define rina_messages_dtpConfig_t_CALLBACK NULL
#define rina_messages_dtpConfig_t_DEFAULT NULL
#define rina_messages_dtpConfig_t_rcvrtimerinactivitypolicy_MSGTYPE rina_messages_policyDescriptor_t
#define rina_messages_dtpConfig_t_sendertimerinactiviypolicy_MSGTYPE rina_messages_policyDescriptor_t
#define rina_messages_dtpConfig_t_initialseqnumpolicy_MSGTYPE rina_messages_policyDescriptor_t
#define rina_messages_dtpConfig_t_dtppolicyset_MSGTYPE rina_messages_policyDescriptor_t

#define rina_messages_connection_t_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   src_cep_id,        1) \
X(a, STATIC,   OPTIONAL, UINT32,   dest_cep_id,       2) \
X(a, STATIC,   OPTIONAL, UINT32,   qos_id,            3) \
X(a, STATIC,   OPTIONAL, UINT32,   src_address,       4) \
X(a, STATIC,   OPTIONAL, UINT32,   dest_address,      5) \
X(a, STATIC,   OPTIONAL, UINT32,   port_id,           6) \
X(a, STATIC,   OPTIONAL, MESSAGE,  dtp_config,        7) \
X(a, STATIC,   OPTIONAL, UINT32,   pdus_tx,           8) \
X(a, STATIC,   OPTIONAL, UINT32,   pdus_rx,           9) \
X(a, STATIC,   OPTIONAL, UINT64,   bytes_tx,         10) \
X(a, STATIC,   OPTIONAL, UINT64,   bytes_rx,         11)
#define rina_messages_connection_t_CALLBACK NULL
#define rina_messages_connection_t_DEFAULT NULL
#define rina_messages_connection_t_dtp_config_MSGTYPE rina_messages_dtpConfig_t

extern const pb_msgdesc_t rina_messages_dtcpWindowBasedFlowControlConfig_t_msg;
extern const pb_msgdesc_t rina_messages_dtcpRateBasedFlowControlConfig_t_msg;
extern const pb_msgdesc_t rina_messages_dtcpFlowControlConfig_t_msg;
extern const pb_msgdesc_t rina_messages_dtcpRtxControlConfig_t_msg;
extern const pb_msgdesc_t rina_messages_dtcpConfig_t_msg;
extern const pb_msgdesc_t rina_messages_dtpConfig_t_msg;
extern const pb_msgdesc_t rina_messages_connection_t_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define rina_messages_dtcpWindowBasedFlowControlConfig_t_fields &rina_messages_dtcpWindowBasedFlowControlConfig_t_msg
#define rina_messages_dtcpRateBasedFlowControlConfig_t_fields &rina_messages_dtcpRateBasedFlowControlConfig_t_msg
#define rina_messages_dtcpFlowControlConfig_t_fields &rina_messages_dtcpFlowControlConfig_t_msg
#define rina_messages_dtcpRtxControlConfig_t_fields &rina_messages_dtcpRtxControlConfig_t_msg
#define rina_messages_dtcpConfig_t_fields &rina_messages_dtcpConfig_t_msg
#define rina_messages_dtpConfig_t_fields &rina_messages_dtpConfig_t_msg
#define rina_messages_connection_t_fields &rina_messages_connection_t_msg

/* Maximum encoded size of messages (where known) */
#if defined(rina_messages_policyDescriptor_t_size) && defined(rina_messages_policyDescriptor_t_size)
#define rina_messages_dtcpWindowBasedFlowControlConfig_t_size (34 + rina_messages_policyDescriptor_t_size + rina_messages_policyDescriptor_t_size)
#endif
#if defined(rina_messages_policyDescriptor_t_size) && defined(rina_messages_policyDescriptor_t_size) && defined(rina_messages_policyDescriptor_t_size)
#define rina_messages_dtcpRateBasedFlowControlConfig_t_size (40 + rina_messages_policyDescriptor_t_size + rina_messages_policyDescriptor_t_size + rina_messages_policyDescriptor_t_size)
#endif
#if defined(rina_messages_policyDescriptor_t_size) && defined(rina_messages_policyDescriptor_t_size) && defined(rina_messages_policyDescriptor_t_size) && defined(rina_messages_policyDescriptor_t_size) && defined(rina_messages_policyDescriptor_t_size) && defined(rina_messages_policyDescriptor_t_size) && defined(rina_messages_policyDescriptor_t_size) && defined(rina_messages_policyDescriptor_t_size) && defined(rina_messages_policyDescriptor_t_size)
#define rina_messages_dtcpFlowControlConfig_t_size (180 + rina_messages_policyDescriptor_t_size + rina_messages_policyDescriptor_t_size + rina_messages_policyDescriptor_t_size + rina_messages_policyDescriptor_t_size + rina_messages_policyDescriptor_t_size + rina_messages_policyDescriptor_t_size + rina_messages_policyDescriptor_t_size + rina_messages_policyDescriptor_t_size + rina_messages_policyDescriptor_t_size)
#endif
#if defined(rina_messages_policyDescriptor_t_size) && defined(rina_messages_policyDescriptor_t_size) && defined(rina_messages_policyDescriptor_t_size) && defined(rina_messages_policyDescriptor_t_size) && defined(rina_messages_policyDescriptor_t_size) && defined(rina_messages_policyDescriptor_t_size)
#define rina_messages_dtcpRtxControlConfig_t_size (54 + rina_messages_policyDescriptor_t_size + rina_messages_policyDescriptor_t_size + rina_messages_policyDescriptor_t_size + rina_messages_policyDescriptor_t_size + rina_messages_policyDescriptor_t_size + rina_messages_policyDescriptor_t_size)
#endif
#if defined(rina_messages_policyDescriptor_t_size) && defined(rina_messages_policyDescriptor_t_size) && defined(rina_messages_policyDescriptor_t_size) && defined(rina_messages_policyDescriptor_t_size) && defined(rina_messages_policyDescriptor_t_size) && defined(rina_messages_policyDescriptor_t_size) && defined(rina_messages_policyDescriptor_t_size) && defined(rina_messages_policyDescriptor_t_size) && defined(rina_messages_policyDescriptor_t_size) && defined(rina_messages_policyDescriptor_t_size) && defined(rina_messages_policyDescriptor_t_size) && defined(rina_messages_policyDescriptor_t_size) && defined(rina_messages_policyDescriptor_t_size) && defined(rina_messages_policyDescriptor_t_size) && defined(rina_messages_policyDescriptor_t_size) && defined(rina_messages_policyDescriptor_t_size) && defined(rina_messages_policyDescriptor_t_size) && defined(rina_messages_policyDescriptor_t_size)
#define rina_messages_dtcpConfig_t_size          (268 + rina_messages_policyDescriptor_t_size + rina_messages_policyDescriptor_t_size + rina_messages_policyDescriptor_t_size + rina_messages_policyDescriptor_t_size + rina_messages_policyDescriptor_t_size + rina_messages_policyDescriptor_t_size + rina_messages_policyDescriptor_t_size + rina_messages_policyDescriptor_t_size + rina_messages_policyDescriptor_t_size + rina_messages_policyDescriptor_t_size + rina_messages_policyDescriptor_t_size + rina_messages_policyDescriptor_t_size + rina_messages_policyDescriptor_t_size + rina_messages_policyDescriptor_t_size + rina_messages_policyDescriptor_t_size + rina_messages_policyDescriptor_t_size + rina_messages_policyDescriptor_t_size + rina_messages_policyDescriptor_t_size)
#endif
#if defined(rina_messages_policyDescriptor_t_size) && defined(rina_messages_policyDescriptor_t_size) && defined(rina_messages_policyDescriptor_t_size) && defined(rina_messages_policyDescriptor_t_size)
#define rina_messages_connection_t_size          (119 + rina_messages_policyDescriptor_t_size + rina_messages_policyDescriptor_t_size + rina_messages_policyDescriptor_t_size + rina_messages_policyDescriptor_t_size)
#define rina_messages_dtpConfig_t_size           (43 + rina_messages_policyDescriptor_t_size + rina_messages_policyDescriptor_t_size + rina_messages_policyDescriptor_t_size + rina_messages_policyDescriptor_t_size)
#endif

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
