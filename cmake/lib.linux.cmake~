macro(_rs_add_component component_name)
  get_property(prop_components GLOBAL PROPERTY _RS_COMPONENTS)
  list(APPEND prop_components ${component_name})
  set_property(GLOBAL PROPERTY _RS_COMPONENTS ${prop_components})
endmacro()

macro(_rs_set_component_data component_name data_name value)
  set(prop_name _RS_COMPONENTS_${component_name}_${data_name})
  set_property(GLOBAL PROPERTY ${prop_name} ${value})
endmacro()

function(rs_component component_name)
  set(single_value TEST_DIR)
  set(multi_values SRCS INCLUDES REQUIRES)
  cmake_parse_arguments(_ "${options}" "${single_value}" "${multi_values}" ${ARGN})

  set(_RS_${component_name}_INCLUDES ${__INCLUDES} PARENT_SCOPE)

  if(DEFINED __SRCS)
    # Plain static library
    set(${component_name}_SOURCES)

    foreach(src IN LISTS __SRCS)
      set(file ${CMAKE_CURRENT_LIST_DIR}/${src})
      if(EXISTS ${file})
        # If it's a file that exists, add it as-is.
        list(APPEND ${component_name}_SOURCES ${file})
      else()
        # If it's not a file, assume it's globbing patern.
        set(files)
        # Execute the globbing pattern
        file(GLOB files ${src})
        # Append the result to the list of source files for this
        # target.
        list(APPEND ${component_name}_SOURCES ${files})
      endif()
    endforeach()
    add_library(${component_name} STATIC ${${component_name}_SOURCES})
    target_include_directories(${component_name} PUBLIC ${__INCLUDES})
  else()
    # Include-only component

    add_library(${component_name} INTERFACE)
    target_include_directories(${component_name} INTERFACE ${__INCLUDES})
  endif()

  _rs_add_component(${component_name})

  if(DEFINED __REQUIRES)
    set(comp_requirements)
    foreach(req_name ${__REQUIRES})
      list(APPEND comp_requirements ${req_name})
    endforeach()

    _rs_set_component_data(${component_name} REQUIRES "${comp_requirements}")
  endif()

  if(DEFINED __TEST_DIR)
    if(EXISTS "${__TEST_DIR}/CMakeLists.txt")
      include("${__TEST_DIR}/CMakeLists.txt")
    endif()
  endif()
endfunction()

function(rs_plain_component component_name)
  set(single_value DIR TEST_DIR)
  set(multi_values REQUIRES)
  cmake_parse_arguments(_ "${options}" "${single_value}" "${multi_values}" ${ARGN})
  rs_component(${component_name}
    SRCS      ${__DIR}/*.c
    INCLUDES  ${__DIR}/include
    TEST_DIR  ${__TEST_DIR}
    REQUIRES  ${__REQUIRES})
endfunction()

function(rs_include_component component_name)
  set(single_value DIR TEST_DIR)
  set(multi_values REQUIRES)
  cmake_parse_arguments(_ "${options}" "${single_value}" "${multi_values}" ${ARGN})
  rs_component(${component_name}
    INCLUDES  ${__DIR}/include
    TEST_DIR  ${__TEST_DIR}
    REQUIRES  ${__REQUIRES})
endfunction()

function(rs_resolve_dependencies)
  # Get the list of components
  get_property(prop_components GLOBAL PROPERTY _RS_COMPONENTS)

  # Iterate through all components to make sure that their dependency
  # list is sound.
  foreach(component_name ${prop_components})
    message("Resolving dependencies of ${component_name}")

    set(prop_name _RS_COMPONENTS_${component_name}_REQUIRES)
    get_property(component_req_list GLOBAL PROPERTY ${prop_name})

    foreach(component_req IN LISTS component_req_list)
      if(${component_req} IN_LIST prop_components)
        message("... requires ${component_req}: OK")

        target_link_libraries(${component_name} PUBLIC ${component_req})
      else()
        message(FATAL_ERROR "... requires ${component_req}: NOT FOUND")
      endif()
    endforeach()
  endforeach()
endfunction()

#
# ESP-IDF compatibility function.
#
# This does not support everything that the ESP-IDF build system has
# to offer.
#
function(idf_component_register)
  set(single_value DIR)
  set(multi_values SRCS INCLUDE_DIRS REQUIRES)
  cmake_parse_arguments(_ "${options}" "${single_value}" "${multi_values}" ${ARGN})

  cmake_path(GET CMAKE_CURRENT_LIST_DIR FILENAME comp_name)

  # Automatically add the 'test' directory as TEST_DIR if it exists.
  set(test_dir ${CMAKE_CURRENT_LIST_DIR}/test)
  if(NOT EXISTS ${test_dir})
    set(test_dir "")
  endif()

  # Call into our own component functions
  rs_component(${comp_name}
    SRCS     ${CMAKE_CURRENT_LIST_DIR}/${__SRCS}
    INCLUDES ${CMAKE_CURRENT_LIST_DIR}/${__INCLUDE_DIRS}
    TEST_DIR ${test_dir}
    REQUIRES ${__REQUIRES})
endfunction()
